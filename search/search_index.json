{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JVF DTM XSD Parser","text":"<p>Group B (academic year 2024/2025)</p> <p></p>"},{"location":"#description","title":"\ud83d\udcc4 Description","text":"<p>This repository contains the semestral project for the course Free Software GIS, focused on processing XSD files for JVF DTM using Python scripts and Jupyter notebooks. You can find the XSD schemas for JVF DTM here: XSD for DTM</p>"},{"location":"#authors","title":"\ud83d\udc65 Authors","text":"<ul> <li>Mat\u011bj Klime\u0161</li> <li>Michal Kov\u00e1\u0159</li> </ul>"},{"location":"about/","title":"\ud83d\udcd8 About","text":"<p>This project focuses on parsing and analyzing XSD schemas used in the Czech national digital technical map (DTM). Python utility parses and validates the XSD schemas. On each run it will:</p> <ul> <li>Unpacks the ZIP and verifies every <code>.xsd</code> file is referenced by <code>index_data.xsd</code> or <code>input_data.xsd</code> </li> <li>Prints a warning for any missing or unreferenced schemas (non-blocking)  </li> </ul> <p>It then produces two CSV outputs:</p> <ul> <li>summary.csv: Provides a overview of key elements found in XSD files</li> <li>detailed.csv: Contains a full breakdown of elements, types, and attributes extracted from XSD files based on a configuration file.</li> </ul> <p>Tested on DTM XSD versions 1.4.3 and 1.5.0.beta3.</p>"},{"location":"config/","title":"\u2699\ufe0f XSD Configuration File","text":"<p>This page documents the structure and meaning of configuration file used to extract metadata from <code>.xsd</code> files, specifically for versions 1.4.3 and 1.5.0.</p> <p>These JSON config file drive the behavior of XSD parsing scripts and influence the generated detailed CSV output (<code>detailed_*.csv</code>).</p>"},{"location":"config/#top-level-keys","title":"Top-Level Keys","text":"Key Type Description <code>filename</code> bool Includes the XSD filename in output. <code>namespace</code> bool Extracts the <code>targetNamespace</code> of the schema. <code>name</code> bool Extracts the <code>@name</code> attribute of the root element. <code>type</code> bool Extracts the <code>@type</code> attribute of the root element. <code>element_types</code> dict Mapping of element names to extraction rules (see below). <p>These keys are identical in both config versions.</p>"},{"location":"config/#element_types","title":"<code>element_types</code>","text":"<p>Each entry under <code>element_types</code> defines how a specific element should be matched and which data should be extracted.</p>"},{"location":"config/#common-options-per-element","title":"Common Options per Element","text":"Key Type Description <code>match</code> string Attribute to use for identifying elements (e.g. <code>name</code>, <code>ref</code>, <code>substitutionGroup</code>). <code>exist</code> bool If <code>true</code>, check if the element exists in XSD file <code>minOccurs</code> bool If <code>true</code>, extract the <code>minOccurs</code> attribute value. <code>fixed</code> bool If <code>true</code>, extract the <code>fixed</code> attribute. <code>type</code> bool/\"unique\" Extract all <code>type</code> attributes; <code>\"unique\"</code> means extract only unique values. <code>attributes</code> dict Nested attributes to extract (e.g. <code>code_base</code>, <code>code_suffix</code>). &gt; Note: &gt; If <code>match</code> is not defined for an element in the config, the default matching attribute is <code>name</code>. <pre><code>\"KategorieObjektu\": {\n      \"match\": \"name\",\n      \"fixed\": true\n    }\n</code></pre>"},{"location":"config/#attributes","title":"<code>attributes</code>","text":"<p>The <code>attributes</code> dictionary allows specifying particular attributes of complex elements to extract.</p> <p>Each key in <code>attributes</code> represents an attribute name (e.g. <code>code_base</code>, <code>dim</code>, etc.), and its value is a list of attribute properties to extract from that attribute:</p> <pre><code>\"attributes\": {\n  \"code_base\": [\"fixed\", \"use\"],\n  \"dim\": [\"fixed\", \"use\"]\n}\n</code></pre>"},{"location":"config/#specifics-for-version-143","title":"Specifics for version 1.4.3","text":"<p>In XSD version 1.4.3, GeometrieObjektu does not have a defined <code>type</code>. If GeometrieObjektu is present in <code>element_types</code>, the geometry type is saved automatically.</p>"},{"location":"dependencies/","title":"\ud83e\uddf0 Dependencies","text":"<p>To run this project, you need Python 3.x and the following dependencies:</p>"},{"location":"dependencies/#standard-python-libraries-no-installation-needed","title":"\u2705 Standard Python libraries (no installation needed)","text":"<p>These are included with every Python distribution:</p> <ul> <li><code>zipfile</code> \u2013 for extracting the ZIP archive</li> <li><code>json</code> \u2013 for reading the config file</li> <li><code>pathlib</code> \u2013 for working with filesystem paths</li> <li><code>tempfile</code> \u2013 for creating temporary folders</li> <li><code>argparse</code> \u2013 for parsing command-line arguments  </li> <li><code>sys</code> \u2013 for access to system\u2010level functions  </li> </ul>"},{"location":"dependencies/#external-packages-must-be-installed-via-pip","title":"\ud83d\udce6 External packages (must be installed via <code>pip</code>)","text":"<p>These libraries must be installed manually:</p> <ul> <li><code>lxml</code> \u2013 fast XML and XSD parsing  </li> <li><code>pandas</code> \u2013 tabular data handling and CSV export  </li> <li><code>xmlschema</code> \u2013 optional schema-level validation (used only in some modules)</li> </ul> <p>Install them using:</p> <pre><code>pip install lxml pandas xmlschema\n</code></pre>"},{"location":"license/","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License.</p> <p>You are free to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of this software, under the terms outlined below.</p>"},{"location":"license/#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Mat\u011bj Klime\u0161, Michal Kov\u00e1\u0159\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"structure/","title":"\ud83d\uddc2\ufe0f Repository Structure","text":"<p>Project repository is organized into the following folders and files:</p> <pre><code>2025-b-jvf-dtm-xsd/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 deploy.yml                    # GitHub Actions\n\u251c\u2500\u2500 doc/                                  # Documentation texts\n\u251c\u2500\u2500 doc.yml                               # MkDocs configuration file\n\u251c\u2500\u2500 LICENSE                               # MIT license text\n\u251c\u2500\u2500 README.md                             # Project overview\n\u251c\u2500\u2500 notebooks/\n\u2502   \u251c\u2500\u2500 test-input-xsd.ipynb              # Notebook for validating XSD imports\n\u2502   \u2514\u2500\u2500 test-parse-input-xsd-to-csv.ipynb # Notebook for parsing XSD\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 parse_xsd_to_csv.py               # Main script for processing XSD files\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u2502   \u251c\u2500\u2500 config_str1_test.json         # Configuration for parsing rules\n\u2502   \u2502   \u2514\u2500\u2500 JVF_DTM_143_XSD.zip           # Test ZIP archive of XSD schemas\n\u2502   \u2514\u2500\u2500 output/\n\u2502       \u251c\u2500\u2500 detailed.csv                  # Detailed output CSV\n\u2502       \u2514\u2500\u2500 summary.csv                   # Summary output CSV\n\u2514\u2500\u2500 .gitignore                            # Gitignore file\n</code></pre>"},{"location":"usage/","title":"\ud83d\udd27 Usage","text":"<p>This section explains how to use the script to extract data from ZIP archives containing XSD files and output the results into summary and detailed CSV files.</p>"},{"location":"usage/#general-instructions","title":"General Instructions","text":"<p>You can run the script from the command line using Python.</p> <p>Basic syntax:</p> <pre><code>python parse_xsd_to_csv.py --input &lt;ZIP_FILE&gt; --summary &lt;SUMMARY_CSV&gt; --detailed &lt;DETAILED_CSV&gt; --config &lt;CONFIG_JSON&gt;\n</code></pre> <p>Where:</p> <ul> <li><code>--input</code> is the path to the input ZIP archive containing XSD files.</li> <li><code>--summary</code> is the path to the output CSV file with a summary of elements.</li> <li><code>--detailed</code> is the path to the output CSV file with detailed element descriptions.</li> <li><code>--config</code> is the path to the JSON file specifying element types and fields for detailed export.</li> </ul>"},{"location":"usage/#examples-for-project-structure","title":"Examples for Project Structure","text":"<p>If you're running from the root of the repository, and using the provided test data and configuration:</p>"},{"location":"usage/#windows","title":"Windows","text":"<p>XSD version 1.4.3</p> <pre><code>python .\\src\\parse_xsd_to_csv.py --input .\\tests\\data\\JVF_DTM_143_XSD.zip --summary .\\tests\\output\\summary_1.4.3.csv --detailed .\\tests\\output\\detailed_1.4.3.csv --config .\\tests\\data\\config_1.4.3.json\n</code></pre> <p>XSD version 1.5.0</p> <pre><code>python .\\src\\parse_xsd_to_csv.py --input .\\tests\\data\\JVF_DTM_150_beta3_XSD.zip --summary .\\tests\\output\\summary_1.5.0.csv --detailed .\\tests\\output\\detailed_1.5.0.csv --config .\\tests\\data\\config_1.5.0.json\n</code></pre>"},{"location":"usage/#linux-macos","title":"Linux / macOS","text":"<p>XSD version 1.4.3</p> <pre><code>python3 ./src/parse_xsd_to_csv.py --input ./tests/data/JVF_DTM_143_XSD.zip --summary ./tests/output/summary_1.4.3.csv --detailed ./tests/output/detailed_1.4.3.csv --config ./tests/data/config_1.4.3.json\n</code></pre> <p>XSD version 1.5.0</p> <pre><code>python3 ./src/parse_xsd_to_csv.py --input ./tests/data/JVF_DTM_150_beta3_XSD.zip --summary ./tests/output/summary_1.5.0.csv --detailed ./tests/output/detailed_1.5.0.csv --config ./tests/data/config_1.5.0.json\n</code></pre>"},{"location":"usage/#configuration-file","title":"Configuration File","text":"<p>For detailed information about the configuration file structure and settings, see the Configuration File Structure.</p>"},{"location":"usage/#notes","title":"Notes","text":"<ul> <li>The input ZIP archive must contain a folder structure ending with <code>xsd/objekty</code> where the <code>.xsd</code> files are located.</li> <li>The summary CSV file includes basic information about referenced elements like <code>atr:</code> and <code>gml:</code>.</li> <li>The detailed CSV file uses a JSON configuration to extract more specific attributes from the XSD schema.</li> </ul>"}]}